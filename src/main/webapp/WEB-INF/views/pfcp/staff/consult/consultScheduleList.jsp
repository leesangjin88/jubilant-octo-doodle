<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>
<%@ taglib uri="jakarta.tags.core" prefix="c"%>

<title>ÍµêÏàò ÏÉÅÎã¥ ÏãúÍ∞Ñ ÏÑ§Ï†ï</title>
<link rel="stylesheet" href="/dist/assets/css/bodyFormat.css">
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">

<style>

body{
	background-color:#F5F7FD;
}

.main-container {
    margin-left: auto;
    margin-right: auto;
    margin-top: 3rem; /* my-12 */
    margin-bottom: 3rem; /* my-12 */
    padding: 2rem; /* p-8 */
    background-color: #ffffff; /* bg-white */
    border-radius: 0.75rem; /* rounded-xl */
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05); /* shadow-lg */
}



/* Main layout wrapper */
.layout-wrapper {
    display: flex;
    gap: 2rem;
    align-items: flex-start;
}

/* Department dropdown */
.department-dropdown {
    margin-bottom: 1.5rem; /* margin-bottom: 1.5rem; */
}

.selectBox {
    width: 100%;
    padding: 0.5rem 1rem; /* py-2 px-4 */
    border: 1px solid #d1d5db; /* border border-gray-300 */
    border-radius: 0.375rem; /* rounded-md */
    background-color: #ffffff; /* bg-white */
    appearance: none; /* remove default arrow */
    -webkit-appearance: none;
    -moz-appearance: none;
    background-image: url('data:image/svg+xml;charset=US-ASCII,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%2032%2032%22%3E%3Cpath%20d%3D%22M16%2C20.7L6.6%2C11.3c-0.4-0.4-1-0.4-1.4%2C0s-0.4%2C1%2C0%2C1.4l10.7%2C10.7c0.4%2C0.4%2C1%2C0.4%2C1.4%2C0l10.7-10.7c0.4-0.4%2C0.4-1%2C0-1.4s-1-0.4-1.4%2C0L16%2C20.7z%22%2F%3E%3C%2Fsvg%3E'); /* custom arrow */
    background-repeat: no-repeat;
    background-position: right 0.75rem center;
    background-size: 0.75rem;
    font-size: 1rem;
    line-height: 1.5rem;
}

/* Professor card wrapper */
.professor-card-wrapper {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    text-align: center;
}

/* Professor card */
.professor-card {
    flex: 1 1 calc(50% - 0.5rem); /* flex: 1 1 calc(50% - 0.5rem) */
    cursor: pointer;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 1.5rem; /* p-6 */
    background-color: #ffffff; /* bg-white */
    border-radius: 0.5rem; /* rounded-lg */
    box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06); /* shadow-sm */
    transition: transform 0.2s ease, border 0.2s ease, box-shadow 0.2s ease;
}

.professor-card:hover {
    transform: translateY(-3px);
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

/* Selected card style */
.professor-card.selected {
    border: 2px solid #3b82f6; /* Tailwind blue-500 */
    transform: translateY(-5px);
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.professor-card-icon {
    font-size: 2rem; /* text-3xl */
    background-color: #f1f5f9; /* bg-slate-100 */
    border-radius: 9999px; /* rounded-full */
    padding: 0.75rem; /* p-3 */
    color: #3b82f6; /* text-blue-500 */
}

.professor-info h4 {
    margin: 0;
    font-size: 1.125rem; /* text-lg */
    font-weight: 600; /* font-semibold */
    color: #1e293b; /* text-slate-900 */
}

.professor-info p {
    margin: 0.25rem 0 0; /* mt-1 */
    font-size: 0.875rem; /* text-sm */
    color: #64748b; /* text-slate-500 */
}

/* Notice box for empty professor list */
.noticeBox {
    padding: 1rem;
    border-radius: 0.375rem;
    font-size: 0.875rem;
    text-align: center;
    width: 100%;
}

.noticeWarning {
    background-color: #fef3c7; /* bg-amber-100 */
    color: #b45309; /* text-amber-700 */
    border: 1px solid #fbbf24; /* border-amber-400 */
}

/* Professor detail area */
#professorDetailArea {
    flex: 1;
    border-left: 1px solid #e2e8f0; /* border-l border-gray-200 */
    padding-left: 2rem; /* pl-8 */
}

#professorDetailArea .text-center {
    text-align: center;
    margin-bottom: 2rem; /* mb-8 */
    padding: 1rem; /* p-4 */
    background-color: #eff6ff; /* bg-blue-50 */
    border-radius: 0.5rem; /* rounded-lg */
}

#professorDetailArea h3 {
    font-size: 1.25rem; /* text-xl */
    font-weight: 700; /* font-bold */
    color: #1d4ed8; /* text-blue-700 */
    margin-bottom: 0.25rem; /* mb-1 */
}

#professorDetailArea h3 .font-normal {
    font-weight: 400; /* font-normal */
    color: #4b5563; /* text-gray-600 */
}

/* Schedule table container */
#scheduleTableContainer {
    border-top: 1px solid #e2e8f0; /* border-t border-gray-200 */
    padding-top: 2rem; /* pt-8 */
    margin-top: 2rem; /* mt-8 */
}

#scheduleTableContainer p {
    color: #4b5563; /* text-gray-600 */
    text-align: center;
}

/* Button area */
#buttonArea {
    display: flex;
    justify-content: center;
    margin-top: 2.5rem; /* mt-10 */
    gap: 1rem; /* space-x-4 */
}

/* Button base styles */
.cancelButton, .saveButton, .editButton {
    padding: 0.75rem 1.5rem; /* py-3 px-6 */
    border-radius: 0.5rem; /* rounded-lg */
    font-weight: 600; /* font-semibold */
    cursor: pointer;
    transition: background-color 0.2s ease, box-shadow 0.2s ease;
}

.cancelButton {
    background-color: #e5e7eb; /* bg-gray-200 */
    color: #4b5563; /* text-gray-700 */
    border: none;
}

.cancelButton:hover {
    background-color: #d1d5db; /* hover:bg-gray-300 */
}

.saveButton {
    background-color: #22c55e; /* bg-green-500 */
    color: #ffffff; /* text-white */
    border: none;
}

.saveButton:hover {
    background-color: #16a34a; /* hover:bg-green-600 */
}

.editButton {
    background-color: #3b82f6; /* bg-blue-500 */
    color: #ffffff; /* text-white */
    border: none;
}

.editButton:hover {
    background-color: #2563eb; /* hover:bg-blue-600 */
}

/* Styles for schedule table cells (from getConsultScheduleFragment.do) */
/* These styles should ideally be applied to the dynamically loaded content as well */
.schedule-table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 1rem;
}

.schedule-table th, .schedule-table td {
    border: 1px solid #e5e7eb; /* border border-gray-300 */
    padding: 0.75rem; /* p-3 */
    text-align: center;
}

.schedule-table th {
    background-color: #f9fafb; /* bg-gray-50 */
    font-weight: 600;
    color: #4b5563;
    white-space: nowrap; /* prevent wrapping for time headers */
}

.schedule-table td {
    background-color: #ffffff; /* bg-white */
    transition: background-color 0.2s ease;
}

.schedule-table td.bg-blue-200 { /* This class is used for existing reservations */
    background-color: #bfdbfe; /* bg-blue-200 */
}

.schedule-table td.bg-green-200 { /* This class is used for newly added slots in edit mode */
    background-color: #d1fae5; /* bg-green-200 */
}

.schedule-table td.hover\:bg-blue-300:hover { /* This class is for hover effect on existing reservations */
    background-color: #93c5fd; /* hover:bg-blue-300 */
}

.schedule-table td.hover\:bg-green-300:hover { /* This class is for hover effect on newly added slots */
    background-color: #a7f3d0; /* hover:bg-green-300 */
}

.schedule-table td.hover\:bg-gray-100:hover { /* This class is for hover effect on empty slots */
    background-color: #f3f4f6; /* hover:bg-gray-100 */
}


.schedule-table td span {
    display: block;
    font-size: 0.875rem; /* text-sm */
    line-height: 1.25rem;
}

.schedule-table td span.text-gray-400 {
    color: #9ca3af; /* text-gray-400 */
}

.schedule-table td span.text-blue-700 {
    color: #1d4ed8; /* text-blue-700 */
    font-weight: 500;
}

.schedule-table td span.text-green-700 {
    color: #047857; /* text-green-700 */
    font-weight: 500;
}


</style>
</head>

	<div class="main-container">

		<div class="layout-wrapper" style="display: flex; gap: 2rem; align-items: flex-start;">

			<div style="flex: 0 0 35%;">
				<div class="department-dropdown" style="margin-bottom: 1.5rem;">
					<select id="departmentFilter" class="selectBox" onchange="filterProfessors(this.value)">
						<option value="">ÌïôÍ≥ºÎ•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî</option>
						<option value="DP001">Ïª¥Ìì®ÌÑ∞Í≥µÌïôÍ≥º</option>
						<option value="DP002">Ï†ÑÏûêÍ≥µÌïôÍ≥º</option>
						<option value="DP003">ÏãúÍ∞ÅÎîîÏûêÏù∏ÌïôÍ≥º</option>
						<option value="DP004">ÏÜåÌîÑÌä∏Ïõ®Ïñ¥ÌïôÍ≥º</option>
						<option value="DP005">Íµ≠Ïñ¥Íµ≠Î¨∏ÌïôÍ≥º</option>
		                <option value="1">Ï†ïÎ≥¥ÌÜµÏã†Í≥µÌïôÍ≥º</option> </select>
				</div>
				
				<div class="professor-card-wrapper" style="display: flex; flex-wrap: wrap; gap: 1rem; text-align:center;">
					<c:choose>
						<c:when test="${not empty professorList }">
							<c:forEach items="${professorList }" var="professor">
								<div class="card professor-card"
						             data-department="${professor.department.departmentNo}"
						             data-prof-id="${professor.userNo}"
						             onclick="selectProfessor('${professor.userNo}', '${professor.user.userName}', '${professor.department.departmentName}')"
						             style="
						                flex: 1 1 calc(50% - 0.5rem);
						                cursor: pointer;
						                display: flex;
						                flex-direction: column;
						                align-items: center;
						                justify-content: center;
						                padding: 1.5rem;
						                transition: transform 0.2s ease, border 0.2s ease, box-shadow 0.2s ease;
						             ">
									<div class="professor-card-icon"
										 style="font-size: 2rem; background-color: #f1f5f9; border-radius: 9999px; padding: 0.75rem; color: #3b82f6;">
										üë®‚Äçüè´
									</div>
									<div class="professor-info">
										<h4 style="margin: 0; font-size: 1rem; font-weight: 600; color: #1e293b;">${professor.user.userName}</h4>
										<p style="margin: 0.25rem 0 0; font-size: 0.875rem; color: #64748b;">${professor.department.departmentName}</p>
									</div>
								</div>
							</c:forEach>
						</c:when>
						<c:otherwise>
							<div class="noticeBox noticeWarning" style="width: 100%;">
								ÏïÑÏßÅ ÍµêÏàò ÏóÜÏùå.
							</div>
						</c:otherwise>
					</c:choose>
				</div>
			</div>

			<div id="professorDetailArea" style="flex: 1; border-left: 1px solid #e2e8f0; padding-left: 2rem;">
				<div class="text-center mb-8 p-4 bg-blue-50 rounded-lg">
					<h3 id="consultName" class="text-xl font-bold text-blue-700 mb-1">
						ÍµêÏàòÎ•º ÏÑ†ÌÉùÌïòÏó¨ ÏÉÅÎã¥ ÏãúÍ∞ÑÌëúÎ•º ÌôïÏù∏ÌïòÏÑ∏Ïöî.
					</h3>
				</div>

				<div id="scheduleTableContainer" class="border-t border-gray-200 pt-8 mt-8">
					<%-- Ïó¨Í∏∞Ïóê AJAXÎ°ú Î∂àÎü¨Ïò® ÏãúÍ∞ÑÌëú HTMLÏù¥ ÏÇΩÏûÖÎê©ÎãàÎã§. --%>
					<p class="text-gray-600 text-center">Ï¢åÏ∏° ÍµêÏàò Î™©Î°ùÏóêÏÑú ÍµêÏàòÎ•º ÏÑ†ÌÉùÌï¥ Ï£ºÏÑ∏Ïöî.</p>
				</div>

				<div id="buttonArea" style= "margin-left:45%;" class="hidden">
					<div style="display:flex; gap:1rem;">
						<button id="saveScheduleButton" onclick="saveSchedule()" class="submitButton" style="display:none;">Ï†ÄÏû•</button>
						<button id="cancelEditButton" onclick="cancelEdit()" class="cancelButton" style="display:none;" >Ï∑®ÏÜå</button>
					</div>
					<button id="editScheduleButton" onclick="toggleEditMode()" class="editButton" >ÏàòÏ†ï</button>
				</div>
			</div>
		</div>
	</div>

	<script>
		// Ï†ÑÏó≠ Î≥ÄÏàò
		let currentSelectedUserNo = null;
		let currentMode = 'view'; // 'view' ÎòêÎäî 'edit'
		
		// DOM Î°úÎìú ÌõÑ Ï¥àÍ∏∞Ìôî
		document.addEventListener('DOMContentLoaded', () => {
			filterProfessors(''); // ÌéòÏù¥ÏßÄ Î°úÎìú Ïãú Ï†ÑÏ≤¥ ÍµêÏàò Î™©Î°ù ÌëúÏãú
			
			let buttonArea = document.getElementById('buttonArea');
			buttonArea.style.display = 'none'; 

			// URLÏóêÏÑú 'what' (userNo) ÌååÎùºÎØ∏ÌÑ∞Í∞Ä ÏûàÎã§Î©¥ Ìï¥Îãπ ÍµêÏàò Ï†ïÎ≥¥ Î°úÎìú
			const urlParams = new URLSearchParams(window.location.search);
			const initialUserNo = urlParams.get('what');
			const initialMode = urlParams.get('mode');

			if (initialUserNo) {
				// Ï¥àÍ∏∞ Î°úÎî© Ïãú ÌäπÏ†ï ÍµêÏàòÎ•º ÏÑ†ÌÉùÌïú Í≤ÉÏ≤òÎüº Ï≤òÎ¶¨
				selectProfessor(initialUserNo, '', ''); // Ïù¥Î¶Ñ/ÌïôÍ≥º Ï†ïÎ≥¥Îäî AJAX ÏùëÎãµÏóêÏÑú Í∞ÄÏ†∏Ïò¨ Í≤É
				if (initialMode === 'edit') {
					toggleEditMode(); // ÏàòÏ†ï Î™®ÎìúÎ°ú ÏãúÏûë
				}
			}
		});

		// ÌïôÍ≥º ÌïÑÌÑ∞ÎßÅ Ìï®Ïàò
		function filterProfessors(selectedDepartmentNo) {
			const professorCards = document.querySelectorAll('.professor-card');
			professorCards.forEach(card => {
				const departmentNo = card.dataset.department;
				if (selectedDepartmentNo === '' || departmentNo === selectedDepartmentNo) {
					card.style.display = 'flex';
				} else {
					card.style.display = 'none';
				}
			});
		}

		// ÍµêÏàò Ïπ¥Îìú ÌÅ¥Î¶≠ Ïãú ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Î∞è ÏãúÍ∞ÑÌëú Î°úÎìú
		function selectProfessor(userNo, userName, departmentName) {
			console.log('selectProfessor userNo:', userNo);
			
			let buttonArea = document.getElementById('buttonArea');
			buttonArea.style.display = 'block'; 
			

			
			// Ïù¥Ï†ÑÏóê ÏÑ†ÌÉùÎêú Ïπ¥ÎìúÏóêÏÑú 'selected' ÌÅ¥ÎûòÏä§ Ï†úÍ±∞
			document.querySelectorAll('.professor-card').forEach(card => {
				card.classList.remove('selected');
			});

			// ÌòÑÏû¨ ÌÅ¥Î¶≠Îêú Ïπ¥ÎìúÏóê 'selected' ÌÅ¥ÎûòÏä§ Ï∂îÍ∞Ä
			const selectedCard = document.querySelector(`.professor-card[data-prof-id="${userNo}"]`);
			if (selectedCard) {
				selectedCard.classList.add('selected');
			}

			// Ï†ÑÏó≠ Î≥ÄÏàò ÏóÖÎç∞Ïù¥Ìä∏
			currentSelectedUserNo = userNo;
			currentSelectedUserName = userName;
			currentSElectedDepartmentName = departmentName

			// ÏÉÅÎã® ÍµêÏàò Ïù¥Î¶Ñ/ÌïôÍ≥º ÏóÖÎç∞Ïù¥Ìä∏ (ÌÅ¥Î¶≠ Ïãú Î∞õÏùÄ Ï†ïÎ≥¥Î°ú Î®ºÏ†Ä ÏóÖÎç∞Ïù¥Ìä∏)
			const consultNameEl = document.getElementById('consultName');
			if (consultNameEl) {
				consultNameEl.innerHTML = "<span class='font-normal text-gray-600'>ÏÉÅÎã¥ ÏãúÍ∞ÑÌëú</span>";
			}
			
			// Î≤ÑÌäº ÏòÅÏó≠ Î≥¥Ïù¥Í∏∞
			document.getElementById('buttonArea').classList.remove('hidden');

			// AJAX ÏöîÏ≤≠ÏùÑ ÌÜµÌï¥ Ìï¥Îãπ ÍµêÏàòÏùò ÏÉÅÎã¥ ÏãúÍ∞ÑÌëú HTML Ï°∞Í∞ÅÏùÑ Í∞ÄÏ†∏Ïò¥
			// URL: /staff/consult/getConsultScheduleFragment.do
			
			
  
			fetch("/staff/consult/getConsultScheduleFragment.do?userNo=" + userNo + "&mode=" + currentMode)
				.then(response => {
					console.log('fetch URL:', `/staff/consult/getConsultScheduleFragment.do?userNo=${userNo}&mode=${currentMode}`);
					if (!response.ok) {
						throw new Error('Network response was not ok');
					}
					return response.text(); // HTML Ï°∞Í∞ÅÏùÑ ÌÖçÏä§Ìä∏Î°ú Î∞õÏùå
				})
				.then(html => {
					document.getElementById('scheduleTableContainer').innerHTML = html;
					// Ï¥àÍ∏∞ Î°úÎî© Ïãú Ïù¥Î¶Ñ/ÌïôÍ≥º Ï†ïÎ≥¥Í∞Ä ÎπÑÏñ¥ÏûàÎã§Î©¥, ÏÑúÎ≤ÑÏóêÏÑú Î∞õÏùÄ Í∞íÏúºÎ°ú ÏóÖÎç∞Ïù¥Ìä∏ÌïòÎäî Î°úÏßÅÏùÄ ÌïÑÏöîÏãú Ï∂îÍ∞Ä
				})
				.catch(error => {
					console.error('ÍµêÏàò ÏãúÍ∞ÑÌëú Î°úÎìú Ïò§Î•ò:', error);
					document.getElementById('scheduleTableContainer').innerHTML = '<p class="text-red-500 text-center">ÏÉÅÎã¥ ÏãúÍ∞ÑÌëúÎ•º Î∂àÎü¨Ïò§Îäî Îç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.</p>';
				});
			

		}

		// ÏãúÍ∞Ñ Ïä¨Î°Ø ÌÜ†Í∏Ä Ìï®Ïàò (AJAXÎ°ú Î°úÎìúÎêú HTML ÎÇ¥Î∂ÄÏóêÏÑúÎèÑ ÎèôÏûëÌï¥Ïïº Ìï®)
		function toggleTimeSlot(cell, day, hour) {
			if (currentMode !== 'edit') return;

			const span = cell.querySelector('span');
			
			if (span.textContent === 'ÏòàÏïΩÍ∞ÄÎä•') {
				span.textContent = '-';
				span.className = 'text-gray-400';
				cell.classList.remove('bg-blue-200', 'bg-green-200');
				cell.classList.add('bg-white');
				cell.classList.remove('hover:bg-blue-300', 'hover:bg-green-300');
				cell.classList.add('hover:bg-gray-100');
			} else {
				span.textContent = 'ÏòàÏïΩÍ∞ÄÎä•';
				span.className = 'text-blue-700 font-medium';
				cell.classList.remove('bg-white');
				cell.style.backgroundColor = '#bbf7d0';
				cell.classList.remove('hover:bg-gray-100');
				cell.classList.add('hover:bg-green-300');
			}
		}

		// 'ÏàòÏ†ï' Î™®Îìú ÌÜ†Í∏Ä Ìï®Ïàò
		function toggleEditMode() {
			if (!currentSelectedUserNo) {
				alert('Î®ºÏ†Ä ÍµêÏàòÎ•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.');
				return;
			}
			currentMode = 'edit';
			let cancelEditButton = document.getElementById('cancelEditButton');
			let saveScheduleButton = document.getElementById('saveScheduleButton');
			let editScheduleButton = document.getElementById('editScheduleButton');
			
			cancelEditButton.style.display = 'block'; 
			saveScheduleButton.style.display = 'block'; 
			editScheduleButton.style.display = 'none'; 

			// ÏãúÍ∞ÑÌëúÎ•º Îã§Ïãú Î°úÎìúÌïòÏó¨ Î™®Îì† ÏÖÄÏóê ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏ Ìï∏Îì§Îü¨Í∞Ä ÌôúÏÑ±ÌôîÎêòÎèÑÎ°ù Ìï®
			// ÌòÑÏû¨ consultNameÏóê ÌëúÏãúÎêú Ïù¥Î¶ÑÍ≥º ÌïôÍ≥ºÎ•º Îã§Ïãú Ï†ÑÎã¨Ìï©ÎãàÎã§.
			selectProfessor(currentSelectedUserNo, 
			document.querySelector('#consultName').firstChild.textContent.trim(),
			document.querySelector('#consultName span').textContent.replace('-', '').trim()
			);
			
			console.log('toggleEditMode currentSelectedUserNo:', currentSelectedUserNo);
		}
		
		// 'Ï∑®ÏÜå' Î≤ÑÌäº ÌÅ¥Î¶≠ Ïãú (ÏàòÏ†ï Î™®Îìú Ï∑®ÏÜå)
		function cancelEdit() {
			currentMode = 'view';
			
			let cancelEditButton = document.getElementById('cancelEditButton');
			let saveScheduleButton = document.getElementById('saveScheduleButton');
			let editScheduleButton = document.getElementById('editScheduleButton');
			
			cancelEditButton.style.display = 'none'; 
			saveScheduleButton.style.display = 'none';
			editScheduleButton.style.display = 'block';

			// ÏãúÍ∞ÑÌëúÎ•º Îã§Ïãú Î°úÎìúÌïòÏó¨ ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏ Ìï∏Îì§Îü¨Í∞Ä ÎπÑÌôúÏÑ±ÌôîÎêòÎèÑÎ°ù Ìï®
			// ÌòÑÏû¨ consultNameÏóê ÌëúÏãúÎêú Ïù¥Î¶ÑÍ≥º ÌïôÍ≥ºÎ•º Îã§Ïãú Ï†ÑÎã¨Ìï©ÎãàÎã§.
			selectProfessor(currentSelectedUserNo, 
			document.querySelector('#consultName').firstChild.textContent.trim(), 
			document.querySelector('#consultName span').textContent.replace('-', '').trim()
			);
		}

		// 'Î™©Î°ùÏúºÎ°ú' Î≤ÑÌäº ÌÅ¥Î¶≠ Ïãú
		function goToList() {
			alert('Ïù¥ÎØ∏ ÍµêÏàò Î™©Î°ù ÌéòÏù¥ÏßÄÏûÖÎãàÎã§. ÏÑ†ÌÉùÏùÑ Ìï¥Ï†úÌïòÍ≥† Ï¥àÍ∏∞ÌôîÌï©ÎãàÎã§.');
			currentSelectedUserNo = null;
			currentMode = 'view';
			document.querySelectorAll('.professor-card').forEach(card => {
				card.classList.remove('selected');
			});
			document.getElementById('consultName').innerHTML = 'ÍµêÏàòÎ•º ÏÑ†ÌÉùÌïòÏó¨ ÏÉÅÎã¥ ÏãúÍ∞ÑÌëúÎ•º ÌôïÏù∏ÌïòÏÑ∏Ïöî.';
			document.getElementById('scheduleTableContainer').innerHTML = '<p class="text-gray-600 text-center">Ï¢åÏ∏° ÍµêÏàò Î™©Î°ùÏóêÏÑú ÍµêÏàòÎ•º ÏÑ†ÌÉùÌï¥ Ï£ºÏÑ∏Ïöî.</p>';
			document.getElementById('buttonArea').classList.add('hidden');
			document.getElementById('cancelEditButton').classList.add('hidden');
			document.getElementById('saveScheduleButton').classList.add('hidden');
			document.getElementById('editScheduleButton').classList.remove('hidden');
		}
		
		// 'Ï†ÄÏû•' Î≤ÑÌäº ÌÅ¥Î¶≠ Ïãú
		function saveSchedule() {
			  const activeSlots = [];

			  // Î™®Îì† ÏãúÍ∞Ñ Ïä¨Î°Ø ÏÖÄÏùÑ ÏàúÌöåÌïòÎ©∞ 'ÏòàÏïΩÍ∞ÄÎä•' ÏÉÅÌÉúÏù∏ ÏÖÄÏùò Ï†ïÎ≥¥Î•º ÏàòÏßë
			  document.querySelectorAll("#scheduleTableContainer td[data-day][data-hour]").forEach(cell => {
			    const span = cell.querySelector('span');
			    if (span && span.textContent === 'ÏòàÏïΩÍ∞ÄÎä•') {
			      const day = cell.dataset.day;
			      const hour = parseInt(cell.dataset.hour);
			      activeSlots.push({ reservationDay: day, startHour: hour }); // ReservationTimestampVO ÌïÑÎìúÎ™ÖÍ≥º ÏùºÏπò
			    }
			  });

			  if (!currentSelectedUserNo) {
			      alert('Ï†ÄÏû•Ìï† ÍµêÏàòÍ∞Ä ÏÑ†ÌÉùÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.');
			      return;
			  }

			  const formData = new FormData();
			  formData.append('userNo', currentSelectedUserNo); 
			  formData.append('consultList', JSON.stringify(activeSlots)); 

			  fetch('/staff/consult/consultUpdateProcess.do', { // ControllerÏùò Îß§Ìïë Í≤ΩÎ°ú ÌôïÏù∏
			    method: 'POST',
			    body: formData
			  })
			    .then(response => response.json())
			    .then(data => {
			      if (data.success) {
			        alert('ÏòàÏïΩ ÏãúÍ∞Ñ ÏÑ§Ï†ïÏù¥ Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§!');
			        // Ï†ÄÏû• ÌõÑ Î≥¥Í∏∞ Î™®ÎìúÎ°ú Ï†ÑÌôòÌïòÍ≥† ÏãúÍ∞ÑÌëú Î¶¨Î°úÎìú
			        cancelEdit(); // ÏàòÏ†ï Î™®Îìú Ï∑®ÏÜå (Î≥¥Í∏∞ Î™®ÎìúÎ°ú ÎèåÏïÑÍ∞ê)
			      } else {
			        alert('Ï†ÄÏû• Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ' + (data.message || 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò'));
			      }
			    })
			    .catch(error => {
			      console.error('Error:', error);
			      alert('Ï†ÄÏû• Ï§ë ÌÜµÏã† Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
			    });
		}

	</script>

